<?xml version='1.0' encoding='utf-8'?>
<sample title="Weapon Clipping">
	<sdk_desc>Rendering the weapon from a second camera into a texture to avoid clipping issues.</sdk_desc>
	<desc>
		<brief>In first-person games, weapon models can clip through walls or geometry when the camera gets too close. This sample solves the problem by rendering the weapon separately into a texture and overlaying it on top of the main camera view.</brief>
		<para>The setup uses two cameras with identical transforms to keep their views aligned. <ui><link to="principles_bit_masking" offset="viewport">Viewport masks</link></ui> for cameras are set via UnigineEditor: the main camera renders everything except the weapon, while the secondary (weapon) camera renders only the weapon. The weapon view is captured into a texture using <ui><link to="viewport_class" offset="renderTexture2D_Camera_Texture_void">Viewport.RenderTexture2D()</link></ui>.</para>
		<para>Each frame, this texture is overlaid onto the screen using <ui><link to="render_class" offset="renderScreenMaterial_cstr_void">Render.RenderScreenMaterial()</link></ui>, compositing the weapon on top of the environment. The component handles screen resizing, maintains isolated render states, and offers optional settings like skipping shadows in the weapon rendering pass.</para>
		<para>This approach keeps the weapon always visible, even when the camera is close to walls, without interfering with the main rendering pipeline</para>
	</desc>
	<tags>
		<tag>Render</tag>
		<tag>Cameras</tag>
		<tag>Games</tag>
		<tag>Basic Recipes</tag>
	</tags>
</sample>