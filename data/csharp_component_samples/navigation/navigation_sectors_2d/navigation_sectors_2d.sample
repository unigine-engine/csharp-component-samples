<?xml version='1.0' encoding='utf-8'?>
<sample title="Navigation Sectors 2D">
	<sdk_desc>Calculating and visualizing 2D navigation paths using <i>Navigation Sector</i> objects and the <i>PathRoute</i> class</sdk_desc>
	<desc>
		<brief>This sample demonstrates how to calculate and visualize 2D navigation paths using the <strong><link to="navigation_sector">Navigation Sector</link></strong> objects and <ui><link to="pathroute_class">PathRoute</link></ui> class. Unlike navigation meshes, sectors allow defining modular navigable areas that can be enabled, disabled, or moved dynamically at runtime.</brief>
		<para>The main logic is implemented in the <strong>PathRoute2D</strong> component, which creates a <ui><link to="pathroute_class">PathRoute</link></ui> class instance and uses <ui><link to="pathroute_class" offset="create2D_Vec3_Vec3_int_void">Create2D()</link></ui> to compute a path through the active navigation sectors. If the route is successfully resolved, the path is drawn on screen using <ui><link to="pathroute_class" offset="renderVisualizer_vec4_void">RenderVisualizer()</link></ui>. The radius parameter is set manually to ensure the generated path accounts for the agent's size, avoiding collisions with nearby geometry.</para>
		<para>To help visualize active navigation areas, the <strong nt="1">NavigationSectorVisualizer</strong> component renders the geometry of all sectors during runtime.</para>
		<para>Sectors are especially useful when navigation space needs to change at runtime - for example, if parts of the environment become inaccessible. Pathfinding requires sectors to be properly connected (their edges must overlap).</para>
		<para>This 2D version is well-suited for top-down navigation, grid-based layouts, or layered 2D gameplay. For more complex 3D navigation scenarios, see the <ui>navigation_sectors_3d</ui> sample.</para> <!--todo: add link to sample-->
	</desc>
	<tags>
		<tag>Navigation &amp; Pathfinding</tag>
		<tag>Visualizer (Visual Debug)</tag>
	</tags>
</sample>